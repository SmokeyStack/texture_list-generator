/*
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@%,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.         .,*********
@@@@@@@@@@@@@@@@@@@%,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.         .,*********
@@@@@@@@@@@@@@@@@@@%,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.         .,*********
@@@@@@@@@@@@@@@@@@@%,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.         .,*********
/////////*,,,,,,,,,*#########/*,,,,,,,,,,,,,,,,,,*(########/         .,*********
*********,         .%%%%%%%%%(*,,,,,,,,,,,,,,,,,,/#%%%%%%%%(         .,*********
*********,         .%%%%%%%%%(*,,,,,,,,,,,,,,,,,,/#%%%%%%%%(         .,*********
*********,         .%%%%%%%%%(*,,,,,,,,,,,,,,,,,,/#%%%%%%%%(         .,*********
*********,         ,%%%%%%%%%(*,,,,,,,,,,,,,,,,,,/#%%%%%%%%(         .,*********
*********,         ,%%%%%%%%%(*,,,,,,,,,,,,,,,,,,/#%%%%%%%%(         .,*********
*********,         ,%%%%%%%%%(*,,,,,,,,,,,,,,,,,,/#%%%%%%%%(         .,*********
*********,         ,%%%%%%%%%(*,,,,,,,,,,,,,,,,,,/#%%%%%%%%(         .,*********
*********,,........,**********,,,,,,,,,,,,,,,,,,,,**********.........,**********
**********,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,**********
**********,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,**********
**********,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,**********
**********,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,**********
**********,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,**********
**********,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,**********
**********,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,**********
********************************************************************************
********************************************************************************
********************************************************************************
*******************************************************************************
*/

#include <iostream>
#include <string>
#include <filesystem>
#include <fstream>
#include <sstream>
#include <regex>
#include <json.hpp>

namespace fs = std::filesystem;
using json = nlohmann::json;

int main() {
	std::cout << "Enter the file path:" << std::endl;
	std::string file_path;
	json list = { 1 };
	std::cin >> file_path;
	for (const auto& file : fs::recursive_directory_iterator(file_path)) {
		if (file.is_regular_file()) {
			if (fs::path(file).extension() == ".png" || fs::path(file).extension() == ".tga") {
				std::string temp_str;
				std::stringstream temp_path;
				temp_path << file.path() << std::endl;
				temp_path >> temp_str;
				std::regex r("\\\\\\\\");
				temp_path << std::regex_replace(temp_str, r, "/") << std::endl;
				temp_path >> temp_str;
				size_t pos = temp_str.find("textures");
				std::string pre_product = temp_str.substr(pos);
				size_t ext = pre_product.find(".");
				std::string final_product = pre_product.substr(0, ext);
				auto new_pos = list.insert(list.end(), final_product);
			}
		}
	}
	list.erase(list.begin());
	std::ofstream MyFile(file_path + "/textures_list.json");
	std::cout << list << std::endl;
	MyFile << list;
	MyFile.close();
	system("pause");
	return EXIT_SUCCESS;
}